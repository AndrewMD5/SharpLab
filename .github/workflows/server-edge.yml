name: Server (.NET) - Edge

on:
  push:
    paths-ignore:
    - '.github/workflows/roslyn-branches.yml'
    - '.github/workflows/web-app*.yml'
    - 'source/WebApp/**'
  pull_request:

jobs:
  build-netfx:
    name: 'Build (.NET Framework)'
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # https://github.com/actions/setup-dotnet/issues/155
    - run: dotnet nuget locals all --clear

    - run: dotnet build source/NetFramework/Tests --configuration Release
    - run: dotnet test source/NetFramework/Tests --no-restore --no-build --configuration Release
    - run: dotnet publish source/NetFramework/Server --no-restore --no-build --configuration Release
    - run: Compress-Archive -Path 'source/NetFramework/Server/bin/publish/*' -DestinationPath 'Server.NetFramework.zip'
      shell: pwsh

    - uses: actions/upload-artifact@v2
      with:
        name: Server.NetFramework
        path: Server.NetFramework.zip

  deploy-netfx-x86:
    name: 'Deploy to Edge (.NET Framework, x86)'
    runs-on: ubuntu-latest
    needs: build-netfx
    environment: edge-server
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: Server.NetFramework
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/webapps-deploy@v2
        with:
          app-name: sl-a-edge-netfx
          package: Server.NetFramework.zip
      - run: Invoke-RestMethod "https://sl-a-edge-netfx.azurewebsites.net/status"
        shell: pwsh

  deploy-netfx-x64:
    name: 'Deploy to Edge (.NET Framework, x64)'
    runs-on: ubuntu-latest
    needs: build-netfx
    environment: edge-server
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: Server.NetFramework
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/webapps-deploy@v2
        with:
          app-name: sl-a-edge-netfx-x64
          package: Server.NetFramework.zip
      - run: Invoke-RestMethod "https://sl-a-edge-netfx-x64.azurewebsites.net/status"
        shell: pwsh

  # Since we are deploying to the edge, we can actually create
  # a proper release _after_ deployment -- only main needs to
  # have the release, and this avoids too many failed releases.
  create-release:
    name: 'Create Release'
    runs-on: ubuntu-latest
    needs:
      - deploy-netfx-x86
      - deploy-netfx-x64
    steps:
      - uses: actions/download-artifact@v2
      - uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: experimental-server-release-${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Run actions/upload-release-asset@v1: Server.NetFramework.zip'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Server.NetFramework/Server.NetFramework.zip
          asset_name: Server.NetFramework.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}